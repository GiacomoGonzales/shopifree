rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funci√≥n helper para verificar si el usuario est√° autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Funci√≥n helper para verificar si el usuario est√° accediendo a sus propios datos
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Reglas para usuarios globales
    match /users/{userId} {
      // Permitir lectura de datos p√∫blicos de usuario a cualquier usuario autenticado
      // Permitir escritura solo al propio usuario
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);

      // Reglas para favoritos del usuario
      match /favorites/{favoriteId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Permitir lectura de usuarios para obtener email del due√±o en notificaciones de pedidos
    match /users/{userId} {
      allow get: if true;
    }

    // ‚úÖ REGLAS GLOBALES PARA TIENDA P√öBLICA
    // Permitir lectura p√∫blica de productos globales
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Permitir lectura p√∫blica de categor√≠as globales
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Permitir lectura p√∫blica de colecciones globales
    match /collections/{collectionId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Contador de √≥rdenes
    match /stores/{storeId}/config/orderCounter {
      allow read, write: if true;
    }

    // Reglas para tiendas
    match /stores/{storeId} {
      // Informaci√≥n b√°sica de la tienda es p√∫blica
      allow read: if true;

      // Permitir crear tienda nueva si el usuario autenticado es el due√±o
      allow create: if isAuthenticated() &&
                      request.auth.uid == request.resource.data.ownerId;

      // Solo el due√±o puede actualizar/eliminar la tienda existente
      allow update, delete: if isAuthenticated() &&
                              request.auth.uid == resource.data.ownerId;

      // Reglas para clientes de la tienda
      match /customers/{customerId} {
        // üÜï PERMITIR CREACI√ìN P√öBLICA DE CLIENTES (para checkout sin registro)
        allow create: if true;

        // üÜï PERMITIR LECTURA Y ACTUALIZACI√ìN POR EMAIL/TEL√âFONO (para b√∫squeda por identificadores)
        allow read, update: if true;

        // Los clientes autenticados pueden leer y escribir su propia informaci√≥n
        allow read, write: if isAuthenticated() &&
                            request.auth.uid == customerId;

        // El due√±o de la tienda puede leer y escribir todos los clientes
        allow read, write: if isAuthenticated() &&
                            request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para √≥rdenes
      match /orders/{orderId} {
        // Lectura: permitir a cualquiera que tenga el ID espec√≠fico del pedido (es √∫nico y dif√≠cil de adivinar)
        // Tambi√©n permitir al due√±o de la tienda si est√° autenticado
        allow read: if true ||
                     (isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId);

        // Crear orden: permitir todas las creaciones
        allow create: if true;

        // Actualizar orden: solo el cliente autenticado (si tiene userId) o el due√±o de la tienda
        allow update: if isAuthenticated() &&
                       (request.auth.uid == resource.data.userId ||
                        request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId);

        // Eliminar orden: solo el due√±o de la tienda
        allow delete: if isAuthenticated() &&
                       request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // üéÅ Reglas para programa de lealtad
      match /config/loyaltyProgram {
        // Lectura p√∫blica para que los clientes vean si hay programa activo
        allow read: if true;

        // Solo el due√±o puede crear/actualizar la configuraci√≥n
        allow create, update: if isAuthenticated() &&
                                request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para puntos de clientes
      match /customerPoints/{pointsId} {
        // Lectura p√∫blica para que los clientes vean sus puntos
        allow read: if true;

        // Permitir creaci√≥n y actualizaci√≥n p√∫blica (necesario para acumular puntos despu√©s de compras)
        allow create, update: if true;

        // Solo el due√±o puede eliminar registros de puntos
        allow delete: if isAuthenticated() &&
                        request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para productos (solo lectura para clientes)
      match /products/{productId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para categor√≠as (solo lectura para clientes)
      match /categories/{categoryId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;

        // Reglas para subcategor√≠as
        match /subcategorias/{subcategoryId} {
          allow read: if true;
          allow write: if isAuthenticated() &&
                        request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
        }
      }

      // Reglas para marcas (solo lectura para clientes)
      match /brands/{brandId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para colecciones (solo lectura para clientes)
      match /collections/{collectionId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para plantillas de modificadores (solo el due√±o puede crear/editar)
      match /modifierTemplates/{templateId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para zonas de entrega
      match /deliveryZones/{zoneId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para filtros de productos
      match /filters/{filterId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para newsletter (suscripciones p√∫blicas)
      match /newsletter/{subscriptionId} {
        // Permitir a cualquiera crear y leer suscripciones (necesario para verificar duplicados)
        allow create, read: if true;
        // Solo el due√±o puede actualizar/eliminar suscripciones
        allow update, delete: if isAuthenticated() &&
                                request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para cupones de descuento
      match /coupons/{couponId} {
        // Lectura p√∫blica para validaci√≥n de cupones
        allow read: if true;

        // Solo el due√±o de la tienda puede crear, actualizar y eliminar cupones
        allow create, update, delete: if isAuthenticated() &&
                                       request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para promociones directas
      match /promotions/{promotionId} {
        // Lectura p√∫blica para aplicar promociones en la tienda
        allow read: if true;

        // Solo el due√±o de la tienda puede crear, actualizar y eliminar promociones
        allow create, update, delete: if isAuthenticated() &&
                                       request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }

      // Reglas para analytics (tracking de visitas)
      match /analytics/{dateDoc} {
        // Permitir lectura solo al due√±o de la tienda (para ver reportes)
        allow read: if isAuthenticated() &&
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;

        // Permitir escritura p√∫blica para tracking de visitantes an√≥nimos
        // Solo permitir crear o actualizar (merge), no eliminar
        allow create, update: if true;
      }

      // Reglas para configuraciones de la tienda (settings)
      match /settings/{settingId} {
        // TEMPORAL: Permitir lectura y escritura para testing de dominios
        // TODO: Implementar Firebase Admin SDK para operaciones del servidor
        allow read, write: if true;
      }
    }

    // Regla adicional para cupones con l√≥gica de incremento de totalUses
    match /stores/{storeId}/coupons/{couponId} {
      allow read: if true;

      // Solo el due√±o puede crear y eliminar cupones
      allow create, delete: if isAuthenticated() &&
                  request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;

      // Para actualizar: el due√±o puede todo, CUALQUIERA puede incrementar totalUses
      allow update: if (isAuthenticated() &&
            request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId) ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalUses']);
    }

    // Funci√≥n helper para verificar si el usuario es administrador
    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
    }

    // Reglas para configuraci√≥n de la plataforma (Admin Panel)
    match /platformConfig/{configId} {
      // TEMPORAL: Permitir acceso a usuarios autenticados para setup inicial
      // TODO: Cambiar a isAdmin() despu√©s de crear usuarios admin
      allow read, write: if isAuthenticated();
    }

    // Reglas para usuarios administradores (Admin Panel)
    match /adminUsers/{adminId} {
      // TEMPORAL: Permitir acceso a usuarios autenticados para setup inicial
      // TODO: Cambiar a isAdmin() despu√©s de crear usuarios admin
      allow read, write: if isAuthenticated();
    }

    // Reglas para captura de leads (email marketing)
    match /leads/{leadId} {
      // Permitir creaci√≥n y lectura p√∫blica (necesario para verificar duplicados)
      allow create, read: if true;

      // Solo administradores pueden actualizar/eliminar leads
      allow update, delete: if isAuthenticated();
    }

    // Reglas para jobs de mejora de im√°genes
    match /imageJobs/{jobId} {
      // Permitir a usuarios autenticados crear jobs con su propio userId
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Permitir a usuarios leer solo sus propios jobs
      // TAMBI√âN permitir lectura p√∫blica temporalmente para debugging
      allow read: if isAuthenticated() &&
                    resource.data.userId == request.auth.uid;

      // Permitir actualizaciones sin autenticaci√≥n (para Cloud Functions)
      // Cloud Functions usa Firebase Admin SDK que debe bypasear reglas,
      // pero agregamos esta regla permisiva por si acaso
      allow update: if true;
    }
  }
}
