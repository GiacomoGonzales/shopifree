rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Función helper para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Función helper para verificar si el usuario está accediendo a sus propios datos
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Reglas para usuarios globales
    match /users/{userId} {
      // Permitir lectura de datos públicos de usuario a cualquier usuario autenticado
      // Permitir escritura solo al propio usuario
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Reglas para favoritos del usuario
      match /favorites/{favoriteId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Reglas para tiendas
    match /stores/{storeId} {
      // Información básica de la tienda es pública
      allow read: if true;
      
      // Permitir crear tienda nueva si el usuario autenticado es el dueño
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.ownerId;
      
      // Solo el dueño puede actualizar/eliminar la tienda existente
      allow update, delete: if isAuthenticated() && 
                              request.auth.uid == resource.data.ownerId;
      
      // Reglas para clientes de la tienda
      match /customers/{customerId} {
        // Los clientes pueden leer y escribir su propia información
        allow read, write: if isAuthenticated() && 
                            request.auth.uid == customerId;
        // El dueño de la tienda puede leer y escribir todos los clientes
        allow read, write: if isAuthenticated() && 
                            request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para órdenes
      match /orders/{orderId} {
        // Lectura: permitir a cualquiera que tenga el ID específico del pedido (es único y difícil de adivinar)
        // También permitir al dueño de la tienda si está autenticado
        allow read: if true || 
                     (isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId);
        
        // Crear orden: permitir todas las creaciones 
        allow create: if true;
        
        // Actualizar orden: solo el cliente autenticado (si tiene userId) o el dueño de la tienda
        allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.userId || 
                        request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId);
        
        // Eliminar orden: solo el dueño de la tienda
        allow delete: if isAuthenticated() && 
                       request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para productos (solo lectura para clientes)
      match /products/{productId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para categorías (solo lectura para clientes)
      match /categories/{categoryId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
        
        // Reglas para subcategorías
        match /subcategorias/{subcategoryId} {
          allow read: if true;
          allow write: if isAuthenticated() && 
                        request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
        }
      }
      
      // Reglas para marcas (solo lectura para clientes)
      match /brands/{brandId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para colecciones (solo lectura para clientes)
      match /collections/{collectionId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para zonas de entrega
      match /deliveryZones/{zoneId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para filtros de productos
      match /filters/{filterId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para newsletter (suscripciones públicas)
      match /newsletter/{subscriptionId} {
        // Permitir a cualquiera crear y leer suscripciones (necesario para verificar duplicados)
        allow create, read: if true;
        // Solo el dueño puede actualizar/eliminar suscripciones
        allow update, delete: if isAuthenticated() && 
                                request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
      
      // Reglas para configuración de dominios (necesario para middleware de routing)
      match /settings/domain {
        // Permitir lectura pública para que el middleware pueda resolver dominios personalizados
        allow read: if true;
        // Solo el dueño puede escribir configuración de dominio
        allow write: if isAuthenticated() && 
                      request.auth.uid == get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId;
      }
    }
  }
}